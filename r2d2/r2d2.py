from .r2d2_extraction import NonMaxSuppression,\
    extract_multiscale,load_network,extract_singlescale
import time

class R2D2_Creator:
    def __init__(self):
        super(R2D2_Creator, self).__init__()
        self.model = load_network('/home/yushichen/projects/r2d2/data/model_256d_14epoch.pt')
        self.model = self.model.cuda()

    def detectAndCompute(self,img):
        detector = NonMaxSuppression(rel_thr=0.7,rep_thr=0.7)

        start_time = time.time()
        # xys, desc, scores = extract_multiscale(self.model, img, detector,
        #     scale_f=2 ** 0.25,
        #     min_scale=0,
        #     max_scale=1,
        #     min_size=256,
        #     max_size=1024,
        #  verbose=False)


        xys, desc, scores = extract_singlescale(self.model,img,detector)
        end_time = time.time()
        # print('extracting time',end_time-start_time)
# reichstag/test/images/34481400_9199849492.jpg reichstag/test/images/62751178_369337490.jpg 0 0 591.159 0.0 319.5 0.0 591.159 211.5 0.0 0.0 1.0 700.224 0.0 319.5 0.0 700.224 258.5 0.0 0.0 1.0 0.9878150551267639 -0.030003878337116062 -0.15271275044880828 1.5406194416949242 0.04015981540011133 0.9971505477232127 0.06385901974134613 -1.1585649897838959 0.15036158449530057 -0.06921381697340634 0.9862052734841942 -4.096694773017618 0.0 0.0 0.0 1.0
# sacre_coeur/test/images/17616986_7085723791.jpg sacre_coeur/test/images/60635619_2829148962.jpg 0 0 511.96 0.0 319.5 0.0 511.96 212.0 0.0 0.0 1.0 530.154 0.0 249.5 0.0 530.154 187.0 0.0 0.0 1.0 0.9689762667190416 -0.13912948644394718 -0.20427427771766093 2.2497283663016274 0.1488070230561525 0.9883245315999676 0.03272751330104895 0.6482118646050332 0.19733591772506653 -0.06210963081155905 0.9783664596336371 0.9458361629563572 0.0 0.0 0.0 1.0
# buckingham_palace/test/images/56032606_8199293549.jpg buckingham_palace/test/images/56990017_8603215183.jpg 0 0 476.287 0.0 319.5 0.0 476.287 239.5 0.0 0.0 1.0 531.719 0.0 319.5 0.0 531.719 213.0 0.0 0.0 1.0 0.9990446528791864 -0.020321478794558336 -0.03868874581979059 -4677.53690679359 0.016451922533260586 0.9950668787239172 -0.09783272004601054 4321.629187532734 0.04048599509047087 0.09710275158945701 0.9944505718412007 48833.44990063391 0.0 0.0 0.0 1.0
# sacre_coeur/test/images/04739785_8198592553.jpg sacre_coeur/test/images/66060871_14030313413.jpg 0 0 720.152 0.0 319.5 0.0 720.152 239.5 0.0 0.0 1.0 564.715 0.0 319.5 0.0 564.715 239.5 0.0 0.0 1.0 0.9815958851193171 -0.03887805100725261 -0.18697062728327657 6.291041466235461 0.07396902987580958 0.980035243669596 0.18455217090217813 -4.7668460672391 0.17606277555478914 -0.19498568746283054 0.9648743341744516 -12.457204396431038 0.0 0.0 0.0 1.0
# reichstag/test/images/64097451_5212815345.jpg reichstag/test/images/77274889_6889793618.jpg 0 0 746.539 0.0 319.5 0.0 746.539 239.5 0.0 0.0 1.0 757.774 0.0 319.5 0.0 757.774 239.5 0.0 0.0 1.0 0.8927042171776902 -0.04774494857448841 -0.44810668430496203 3.767506167918304 0.04312189598658805 0.9988590545868066 -0.020520505755781883 0.27999482458348707 0.4485751695309152 -0.0010044678046878602 0.893744543102077 5.011202203001941 0.0 0.0 0.0 1.0
# sacre_coeur/test/images/51093888_43012197.jpg sacre_coeur/test/images/06132465_4129851965.jpg 0 0 1767.41 0.0 319.5 0.0 1767.41 239.5 0.0 0.0 1.0 298.312 0.0 319.5 0.0 298.312 213.0 0.0 0.0 1.0 0.9966996352332725 0.07965392100983516 -0.015655350319306812 1.4390705155532202 -0.08067000820399327 0.9934087804281843 -0.08143306910926978 -2.1673154656029214 0.009065699213460364 0.0824272275158299 0.9965558515516452 -50.79668509058077 0.0 0.0 0.0 1.0
# sacre_coeur/test/images/56774631_6820191793.jpg sacre_coeur/test/images/97437832_311711460.jpg 0 0 1196.24 0.0 319.5 0.0 1196.24 213.0 0.0 0.0 1.0 489.971 0.0 249.5 0.0 489.971 187.0 0.0 0.0 1.0 0.9961819668236043 0.002404954415486909 0.08726800771023997 -4.647139010369302 -0.009299075977530142 0.9968566148590442 0.07867920054074808 -7.320856674550398 -0.08680447086077533 -0.07919031257689638 0.993072947085235 -34.7404113343712 0.0 0.0 0.0 1.0
# sacre_coeur/test/images/04822190_12621366523.jpg sacre_coeur/test/images/15114643_8210538601.jpg 0 0 437.366 0.0 319.5 0.0 437.366 213.0 0.0 0.0 1.0 927.73 0.0 239.5 0.0 927.73 319.5 0.0 0.0 1.0 0.749640986196629 0.31427034856093444 0.5824710635126301 -8.173907770370304 -0.2498701350511473 0.9493298517239965 -0.1906246265182338 4.654896994745255 -0.612864836178147 -0.0026420902867934012 0.7901833407097679 17.89108423041934 0.0 0.0 0.0 1.0
        idxs = scores.argsort()[-500:]
        xys = xys[idxs]
        desc = desc[idxs]
        scores = scores[idxs]

        kp = xys[:, :2].cpu().numpy()
        desc = desc.cpu().numpy()
        scores = scores.cpu().numpy()

        # print(type(kp), kp.shape, kp[0])
        # print(type(desc), desc.shape)
        # print(type(scores), scores.shape)
        # print(img.shape)
# buckingham_palace/test/images/81310018_8608208863.jpg buckingham_palace/test/images/53271175_196359090.jpg 0 0 559.102 0.0 319.5 0.0 559.102 239.5 0.0 0.0 1.0 717.691 0.0 319.5 0.0 717.691 239.5 0.0 0.0 1.0 0.981293381264081 0.008206322625822467 -0.19234332885823663 34700.20375299982 0.046808252496824965 0.9589403037989246 0.27971857508613807 -8995.232140090331 0.1867412310806061 -0.28348924145192334 0.9406176495237121 -31997.44068410451 0.0 0.0 0.0 1.0
# buckingham_palace/test/images/48284683_6191802350.jpg buckingham_palace/test/images/88817343_6780061632.jpg 0 0 447.039 0.0 319.5 0.0 447.039 213.0 0.0 0.0 1.0 716.556 0.0 319.5 0.0 716.556 213.0 0.0 0.0 1.0 0.7304499453426215 0.011235920683662642 -0.6828738034478639 48437.65914819888 0.05638235984218045 0.9954595508452798 0.07668971332284977 -1590.8005408477097 0.6806349292003666 -0.0945200334178128 0.7264998667825807 10730.713423377623 0.0 0.0 0.0 1.0
        return kp, desc, scores

def r2d2_val(img, net, version=0):
    print(img.shape)
    detector = NonMaxSuppression(rel_thr=0.45, rep_thr=0.4)
    # extract keypoints/descriptors for a single image
    if version == 1:
        xys, desc, scores = extract_multiscale(net, img, detector,
            scale_f=2**0.25,
            min_scale=0,
            max_scale=1,
            min_size=256,
            max_size=1024,
            verbose=False)
    elif version == 0:
        xys, desc, scores = extract_singlescale(net, img, detector)

    idxs = scores.argsort()[-500:]
    xys = xys[idxs]
    desc = desc[idxs]
    scores = scores[idxs]

    kp = xys[:,:2].cpu().numpy()
    desc = desc.cpu().numpy()
    scores = scores.cpu().numpy()

    print(type(kp),kp.shape)
    print(type(desc),desc.shape)
    print(type(scores),scores.shape)
    print(img.shape)

    return kp, desc, scores


